from collections import defaultdict, deque

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)  # For an undirected graph

    def bfs_shortest_path(self, start, end):
        if start == end:
            return [start]

        visited = set()
        queue = deque([(start, [])])

        while queue:
            current_node, path = queue.popleft()

            if current_node not in visited:
                visited.add(current_node)

                for neighbor in self.graph[current_node]:
                    if neighbor not in visited:
                        if neighbor == end:
                            return path + [current_node, neighbor]
                        queue.append((neighbor, path + [current_node]))

        return None  # No path found

# Example usage:
# Create a sample graph
#     1
#    / \
#   2   3
#  / \
# 4   5

sample_graph = Graph()
sample_graph.add_edge(1, 2)
sample_graph.add_edge(1, 3)
sample_graph.add_edge(2, 4)
sample_graph.add_edge(2, 5)

# Find the shortest path from node 1 to node 5
shortest_path = sample_graph.bfs_shortest_path(1, 5)

# Display the result
if shortest_path:
    print("Shortest path from node 1 to node 5:", shortest_path)
else:
    print("No path found between node 1 and node 5.")
