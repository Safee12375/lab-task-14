from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def dfs_util(self, v, visited):
        visited[v] = True
        print(v, end=' ')

        for neighbor in self.graph[v]:
            if not visited[neighbor]:
                self.dfs_util(neighbor, visited)

    def dfs(self, start_node):
        visited = [False] * (max(self.graph) + 1)
        self.dfs_util(start_node, visited)

# Example usage:
# Create a sample graph
#     1
#    / \
#   2   3
#  / \
# 4   5

sample_graph = Graph()
sample_graph.add_edge(1, 2)
sample_graph.add_edge(1, 3)
sample_graph.add_edge(2, 4)
sample_graph.add_edge(2, 5)

# Perform DFS starting from node 1
print("DFS traversal starting from node 1:")
sample_graph.dfs(1)
